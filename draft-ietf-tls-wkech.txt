



TLS                                                           S. Farrell
Internet-Draft                                    Trinity College Dublin
Intended status: Experimental                                    R. Salz
Expires: December 14, 2024                           Akamai Technologies
                                                             B. Schwartz
                                                    Meta Platforms, Inc.
                                                           June 12, 2024


         A well-known URI for publishing ECHConfigList values.
                        draft-ietf-tls-wkech-05

Abstract

   We define a well-known URI at which an HTTP origin can inform an
   authoritative DNS server, or other interested parties, about its
   Service Bindings.  The data can include Encrypted ClientHello (ECH)
   configurations, allowing the origin, in collaboration with DNS
   infrastructure elements, to publish and rotate its own ECH keys.

   The source for this draft is in <https://github.com/sftcd/wkesni/>
   Issues and PRs are welcome there too.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on December 14, 2024.

Copyright Notice

   Copyright (c) 2024 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of



Farrell, et al.         Expires December 14, 2024               [Page 1]

Internet-Draft           Well-Known URI for ECH                June 2024


   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
   2.  Terminology . . . . . . . . . . . . . . . . . . . . . . . . .   3
   3.  Example uses of the well-known URI for ECH  . . . . . . . . .   4
     3.1.  Shared-mode deplpoyment.  . . . . . . . . . . . . . . . .   4
     3.2.  Split-mode, multi-CDN deplpoyment.  . . . . . . . . . . .   5
   4.  The origin-svcb well-known URI  . . . . . . . . . . . . . . .   6
   5.  The JSON structure for origin service binding info  . . . . .   6
   6.  Zone Factory behaviour  . . . . . . . . . . . . . . . . . . .   9
   7.  Security Considerations . . . . . . . . . . . . . . . . . . .   9
   8.  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .  10
   9.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  10
   10. References  . . . . . . . . . . . . . . . . . . . . . . . . .  10
     10.1.  Normative References . . . . . . . . . . . . . . . . . .  10
     10.2.  Informative References . . . . . . . . . . . . . . . . .  11
   Appendix A.  Change Log . . . . . . . . . . . . . . . . . . . . .  12
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  12

1.  Introduction

   Encrypted ClientHello (ECH) [I-D.ietf-tls-esni] for TLS1.3 [RFC8446]
   defines a confidentiality mechanism for server names and other
   ClientHello content in TLS.  Many applications will require
   publication of ECHConfigList data structures in the DNS, where an
   ECHConfigList structure contains a list of ECHConfig values.  Each
   ECHConfig value contains the public component of a key pair that will
   typically be periodically (re-)generated by a web server.  Many web
   infrastructures will have an API that can be used to dynamically
   update the DNS RR values containing ECHConfigList values.  Some
   deployments, however, will not, and those deployments could benefit
   from a mechanism like the one defined here.

   Note that this is not intended for universal deployment, but rather
   for cases where the web server doesn't have write access to the
   relevant zone file (or equivalent).  That zone file will eventually
   include an HTTPS or SVCB RR [I-D.ietf-tls-svcb-ech] containing the
   ECHConfigList.  This mechanism is extensible to deliver other kinds
   of information about the origin, that can be of use in these
   circumstances, but is mainly intended to provide the functionality
   necessary for ongoing management of ECH keys.



Farrell, et al.         Expires December 14, 2024               [Page 2]

Internet-Draft           Well-Known URI for ECH                June 2024


   We use the term "zone factory" (ZF) for the entity that does have
   write access to the zone file.  We assume the ZF can also make HTTPS
   requests to the web server with the ECH keys.  We define a well-known
   URI [RFC8615] on the web server that allows the ZF to poll for
   changes to ECHConfigList values.  For example, if a web server
   generates new ECHConfigList values hourly and publishes those at the
   well-known URI, the ZF can poll that URI.  When the ZF sees new
   values, it can check if those work, and if they do, then update the
   zone file and re-publish the zone.

   If ECH is being operated in split-mode then the web server (backend)
   can similarly poll the ECH client-facing server at the well-known URI
   and then create it's own value to publish for the ZF to read.  ECH
   split-mode is defined in [I-D.ietf-tls-esni] and some examples are
   shown below (Section 3).

   [[ NOTE: The source for this draft is in <https://github.com/sftcd/
   wkesni/> Issues and PRs are welcome there too.  ]]

2.  Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in BCP
   14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

   We define or re-use the following terms:

   o  Zone factory (ZF): an entity that has write-access to the DNS
   o  Client-Facing Server: the web server that has an ECH private
      value.  This processes the outer ClientHello and attempts ECH
      decryption.  The name of client-facing server will typically be
      the public_name value used in an ECHConfig.
   o  Backend: the web server that will process the inner ClientHello.
      Note that even if client-facing server and backend are on the same
      web server, they almost certainly have different DNS names.
   o  Shared-mode: this is where client-facing and backend servers are
      the same web server.
   o  Split-mode: this refers to the case where the client-facing server
      only does ECH decryption but the TLS session is between the client
      and backend, which will typically be on a different host to
      client-facing server
   o  regeninterval: the number of seconds after which the value
      retrieved after acessing a well-known URI may be changed.






Farrell, et al.         Expires December 14, 2024               [Page 3]

Internet-Draft           Well-Known URI for ECH                June 2024


3.  Example uses of the well-known URI for ECH

   Some example deployments are described here.

3.1.  Shared-mode deplpoyment.

                       +--------------------+
                       |                    |
                       |   2001:DB8::1111   | Client-
   Client <----------->|                    | facing
                       |   cfs.example.com  | server
                       | backend.example.com|
                       +--------------------+
                           ^            ^
        (1) ZF reads       |            |  (2) ZF checks
            .well-known    V            V      ECHConfig
                       +--------------------+
                       |                    |
                       |   zf.example.net   | Zone Factory (ZF)
                       |                    |
                       +--------------------+
                                 |
                                 | (3) ZF publishes new HTTPS RR
                                 V
                       +--------------------+
                       |                    |
                       |   ns.example.net   | Authoritative DNS
                       |                    |
                       +--------------------+

         Figure 1: Shared-Mode Topology with Zone Factory and DNS

   The shared-mode ECH server generates new ECHConfigList values every
   "regeninterval" seconds via some regular, automated process (e.g., a
   cronjob).  ECHConfigList values are "current" for an hour, and remain
   usable for three hours from the time of generation.  The automated
   process updates the ECHConfigList values in a JSON resource (see
   Figure 3) at the well-known URI, https://backend.example.com/.well-
   known/origin-svcb.

   These steps then occur.

   1.  On the ZF, another regularly executed job uses an HTTP client to
       retrieve this JSON resource from backend.example.com.  The data
       MUST be fetched via HTTPS and the certificate validity MUST be
       verified.
   2.  The ZF next attempts to connect to backend.example.com using
       these ECH values and confirms that they are working.



Farrell, et al.         Expires December 14, 2024               [Page 4]

Internet-Draft           Well-Known URI for ECH                June 2024


   3.  The ZF observes that the JSON resource has a regeninterval of
       3600 seconds, and chooses a DNS TTL of 1800.  It updates the DNS
       zone file for backend.example.com and re-publishes the zone
       containing only the new ECHConfigList values.

   When "regeninterval" seconds have passed, the ZF attempts to refresh
   its cached copy of the JSON resource.  If the resource has changed,
   it repeats this process.

3.2.  Split-mode, multi-CDN deplpoyment.

   The following diagram, and this entire section, is a place-holder and
   is likely to change.


                       +--------------------+
                       |                    |
                       | backend.example.com|
                       |                    |
                       +--------------------+
                           ^            ^
                           |            |
                           V            V
              +--------------------+ +--------------------+
              |                    | |                    |
              |   2001:DB8::1111   | |   2001:DB8::FFFF   | Client-
   Client <-->|                    | |                    | facing
              |  cfs.cdn1.example  | |  cfs.cdn2.example  | servers
              +--------------------+ +--------------------+
                           ^            ^
        (1) ZF reads       |            |  (2) ZF checks
            .well-known    V            V      ECHConfig
                       +--------------------+
                       |                    |
                       |   zf.example.net   | Zone Factory (ZF)
                       |                    |
                       +--------------------+
                                 |
                                 | (3) ZF publishes new HTTPS RR
                                 V
                       +--------------------+
                       |                    |
                       |   ns.example.net   | Authoritative DNS
                       |                    |
                       +--------------------+

         Figure 2: Shared-Mode Topology with Zone Factory and DNS




Farrell, et al.         Expires December 14, 2024               [Page 5]

Internet-Draft           Well-Known URI for ECH                June 2024


   In this topology, the overall process is similar, but certain actions
   must be repeated as described below.

   1.  On the ZF, another regularly executed job uses an HTTP client to
       retrieve this JSON resource from the configured intermediaries.
       The data MUST be fetched via HTTPS and the certificate validity
       MUST be verified.  It is TBD how the ZF knows the intermediaries.
   2.  The ZF next attempts to connect to each intermediary using the
       ECH values and confirms that they are working.
   3.  IT is TBD how the ZF sets the priorities for the backends.

4.  The origin-svcb well-known URI

   If the backend wants to convey information to the Zone Factory, it
   publishes the JSON content defined in Section 5 at:
   https://backend.example.com/.well-known/origin-svcb

   The well-known URI defined here MUST be an https URL and therefore
   the ZF can verify the correct backend is being accessed.

   If no new ECHConfig value verifies (as per Section 6), then the zone
   factory MUST NOT modify the zone.

5.  The JSON structure for origin service binding info

   [[ NOTE: JSON structure is a work in progress.]]

       {
           "regeninterval": 3600,
           "endpoints": [{
               "priority": 1,
               "target": "cdn.example.",
               "params": {
                   "ech": "AD7+DQA65wAgAC..AA=="
               }
           }, {
               "priority": 1,
               "params": {
                   "port": 8413,
                   "ech": "AD7+DQA65wAgAC..AA=="
               }
           }]
       }

               Figure 3: Sample JSON for ECH without aliases






Farrell, et al.         Expires December 14, 2024               [Page 6]

Internet-Draft           Well-Known URI for ECH                June 2024


        {
           "regeninterval": 108000,
           "endpoints": [{
               "alias": "cdn1.example.com",
           }]
         }

                    Figure 4: Sample JSON with aliasing

   The JSON file at the well-known URI MUST contain an object with an
   two keys: "regeninterval", whose value is a number, and "endpoints"
   whose value is an array of objects.  All other keys MUST be ignored.

   The "regeninterval" must be a number greater than zero and specifies
   the number of seconds between key generation actions at the origin,
   i.e. a replacement ECHConfigList may be generated this often.  This
   is used by the ZF to generate DNS TTL values and to determine when to
   next poll the origin for updates.

   The "endpoints" key is an array of objects.  The number of items in
   the array implies restrictions and meaning to the content of the
   items:

   o  An empty endpoints array means that all HTTPS records that the ZF
      has published for the origin should be deleted.
   o  An endpoints array with one element what can be one of three
      things:

      *  An empty object, which the ZF should take to be an HTTPS record
         with inferred SvcPriority, a TargetName equal to ".", and no
         ECH support.  This can can be useful as a simple way to make
         use of the HTTPS RR type's HSTS behavior.
      *  A ServiceMode entry, containing at least one key from the JSON
         HTTP Origin Info registry (see IANA Considerations (Section 9),
         below).
      *  An AliasMode entry that points to another DNS name that must be
         resolved.
   o  If the endpoints array has more than one element, every item
      SHOULD be a ServiceMode entry, due to restrictions on the use of
      multiple AliasMode records (see , Section 2.4.2 [RFC9460]).

   This format is designed to allow full use of the capabilities of
   HTTPS records [RFC9460] in natural JSON while minimizing the risk of
   invalid configurations.

   The following keys are defined for ServiceMode entries:





Farrell, et al.         Expires December 14, 2024               [Page 7]

Internet-Draft           Well-Known URI for ECH                June 2024


   o  target: The value is a string containing a fully qualified domain
      name, corresponding to the HTTPS record's TargetName.  The default
      value is ".".
   o  priority: The value is a positive integer corresponding to the
      SvcPriority.  If omitted, the ZF MAY infer numerically increasing
      SvcPriority from the order of the endpoints array.
   o  params: A JSON Dictionary representing the SVCB SvcParams.  Each
      key in the dictionary is a string containing a registered
      SvcParamKey name (e.g., "ipv6hint") or a SvcParamKey in generic
      form (e.g., "key65528").  The default value is "{}".

      *  For single-valued SvcParams (e.g., "ech"), the value is a JSON
         String.  A JSON String is a sequence of Unicode codepoints,
         while a SvcParam's presentation value is a sequence of octets,
         so each value octet is stored as a single Unicode codepoint
         [ISOMORPHIC-DECODE].  In almost all cases, this is equivalent
         to the ordinary string representation of the presentation
         value.
      *  For list-valued SvcParams (e.g., "alpn"), the value is a JSON
         Array of Strings.  Each String represents an octet sequence, as
         in the single-value case.

   The following key is defined for AliasMode entries.

   o  alias: The value MUST be a DNS name that could be used as the
      TargetName of an HTTPS resource record.  This indicates that the
      backend is hosted on the same endpoints as this target, and is
      equivalent to an HTTPS AliasMode record.  The ZF might implement
      this directive by publishing an AliasMode record, publishing a
      CNAME record, copying HTTPS records from the target zone, or
      fetching https://cfs.example.com/.well-known/origin-svcb (if it
      exists).

   These definitions, taken with the ZF behaviour (Section 6) specified
   below, provide the following important properties:

   o  Origins can express any useful configuration that is representable
      by HTTPS records, including multiple endpoints representing
      different ports, providers, etc.
   o  Origins that simply alias to a single target can indicate this
      without copying the ECHConfig and other parameters, avoiding the
      maintenance burden of staying synchronized with the target's key
      rotations and configuration updates.








Farrell, et al.         Expires December 14, 2024               [Page 8]

Internet-Draft           Well-Known URI for ECH                June 2024


6.  Zone Factory behaviour

   If the ZF is unable to convert the JSON into a DNS zone (e.g., due to
   an unrecognized SvcParamKey), or if the resulting zone fails
   validation checks, the ZF MUST NOT update the DNS.  Such failures
   will not be directly visible to the client-facing server, so ZF
   implementations will need to provide some form of reporting so that
   the situation can be resolved.  Note that this can lead to
   inconsistent behavior for a single origin served by multiple ZFs.

   A ZF MAY apply additional processing according to its own policy,
   such as adjusting TTL values and correcting common misconfigurations.

   ZF SHOULD check that ECH with the presented endpoints succeeds with
   the backend before publication.  In order to make such checks, the ZF
   SHOULD attempt to access the well-known URI defined here while
   attempting ECH.

   A bespoke TLS client is likely needed for this check, that does not
   require the ECHConfigList value to have already been published in the
   DNS.  The TLS client also needs to allow checking for the success or
   failure of ECH.

   If more than one ECHConfig is present in an ECHConfigList, then the
   ZF SHOULD explode the ECHConfigList value presented into "singleton"
   values with one public key in each, and then test each of those
   separately.

   ZF SHOULD publish all the endpoints that are presented in the JSON
   file that pass the checks above.

   ZF SHOULD set a DNS TTL less than regeninterval, i.e. short enough so
   that any cached DNS resource records are likely to have expired
   before the JSON object's content is likely to have changed.  The ZF
   MUST attempt to refresh the JSON object and regenerate the zone
   before this time.  This aims to ensure that ECHConfig values are not
   used longer than intended by backend.

7.  Security Considerations

   This document defines another way to publish ECHConfigList values.
   If the wrong keys were read from here and published in the DNS, then
   clients using ECH would do the wrong thing, likely resulting in
   denial of service, or a privacy leak, or worse, when TLS clients
   attempt to use ECH with a backend web site.  So: Don't do that:-)

   Although this configuration resource MAY be publicly accessible,
   general HTTP clients SHOULD NOT attempt to use this resource in lieu



Farrell, et al.         Expires December 14, 2024               [Page 9]

Internet-Draft           Well-Known URI for ECH                June 2024


   of HTTPS records queries through their preferred DNS server for the
   following reasons:

   o  The bootstrap connection would not be able to use ECH, so it would
      reveal all the information that ECH seeks to protect.
   o  The origin could serve the user with a uniquely identifying
      configuration, potentially resulting in an unexpected tracking
      vector.

   The .well-known URI chosen here means that services running on
   different ports of the same backend are trusting the service running
   on the default port (443) for that backend to provide correct
   endpoint information.

   As described, in mutlti-CDN and simlar scenarios, a ZF might only
   test ECH success against one of the CDNs unless the ZF can make use
   of the ipv4hints and/or ipv6hint values, or the ZF has out of band
   information about the different addresses at which
   backend.example.com can be accessed.

8.  Acknowledgements

   Thanks to Niall O'Reilly, Martin Thomson and David Black for reviews.

   Stephen Farrell's work on this specification was supported in part by
   the Open Technology Fund.

9.  IANA Considerations

   [[ NOTE: IANA registration of a .well-known entry.  ]]

   [[ NOTE: How to handle I18N for $FRONTEND and $BACKEND within such a
   URL.  ]]

   If approved, this specification requests the creation of an IANA
   registry named "JSON HTTP Origin Info" with a Standards Action
   registration policy, containing a field named "Name" whose value is a
   UTF-8 string.

10.  References

10.1.  Normative References









Farrell, et al.         Expires December 14, 2024              [Page 10]

Internet-Draft           Well-Known URI for ECH                June 2024


   [I-D.ietf-tls-esni]
              Rescorla, E., Oku, K., Sullivan, N., and C. Wood, "TLS
              Encrypted Client Hello", draft-ietf-tls-esni-18 (work in
              progress), March 2024,
              <https://datatracker.ietf.org/doc/html/draft-ietf-tls-
              esni-18>.

   [I-D.ietf-tls-svcb-ech]
              Schwartz, B., Bishop, M., and E. Nygren, "Bootstrapping
              TLS Encrypted ClientHello with DNS Service Bindings",
              draft-ietf-tls-svcb-ech-02 (work in progress), May 2024,
              <https://datatracker.ietf.org/doc/html/draft-ietf-tls-
              svcb-ech-02>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/info/rfc8174>.

   [RFC8446]  Rescorla, E., "The Transport Layer Security (TLS) Protocol
              Version 1.3", RFC 8446, DOI 10.17487/RFC8446, August 2018,
              <https://www.rfc-editor.org/info/rfc8446>.

   [RFC8615]  Nottingham, M., "Well-Known Uniform Resource Identifiers
              (URIs)", RFC 8615, DOI 10.17487/RFC8615, May 2019,
              <https://www.rfc-editor.org/info/rfc8615>.

   [RFC9460]  Schwartz, B., Bishop, M., and E. Nygren, "Service Binding
              and Parameter Specification via the DNS (SVCB and HTTPS
              Resource Records)", RFC 9460, DOI 10.17487/RFC9460,
              November 2023, <https://www.rfc-editor.org/info/rfc9460>.

10.2.  Informative References

   [ISOMORPHIC-DECODE]
              WHATWG, "WHATWG definition of Isomorphic Decode",
              <https://infra.spec.whatwg.org/#isomorphic-decode>.










Farrell, et al.         Expires December 14, 2024              [Page 11]

Internet-Draft           Well-Known URI for ECH                June 2024


Appendix A.  Change Log

   [[ NOTE: RFC editor: please remove this before publication.  ]]

   The -00 WG draft replaces draft-farrell-tls-wkesni-03.

   Version 01 changed from a special-purpose design, carrying only
   ECHConfigs and port numbers, to a more general approach based on
   Service Bindings.

   Version 02 is just a keep-alive

   Version 03 reflects some local implementation experience with -02

   Version 04 matches a proof-of-concept bash script implementation and
   results of IETF-117 discussion.

   Version 05 responds to early artart and dnsop reviews, and some list
   discussion/github issues.

Authors' Addresses

   Stephen Farrell
   Trinity College Dublin
   Dublin  2
   Ireland

   Phone: +353-1-896-2354
   EMail: stephen.farrell@cs.tcd.ie


   Rich Salz
   Akamai Technologies

   EMail: rsalz@akamai.com


   Benjamin Schwartz
   Meta Platforms, Inc.

   EMail: ietf@bemasc.net










Farrell, et al.         Expires December 14, 2024              [Page 12]
